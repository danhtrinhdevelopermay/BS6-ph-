import * as fs from "fs";
import { GoogleGenAI } from "@google/genai";

// Gemini AI service for analyzing posts and generating responses
const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || "" });

export interface PostAnalysis {
  type: 'exercise' | 'discussion' | 'question' | 'general';
  response: string;
  confidence: number;
}

export class GeminiService {
  /**
   * Analyze a post and generate appropriate AI response
   */
  async analyzePost(content: string): Promise<PostAnalysis> {
    try {
      const systemPrompt = `B·∫°n l√† ABS Pro, m·ªôt AI gi√°o d·ª•c th√¥ng minh c·ªßa Bright Starts Academy. 
H√£y ph√¢n t√≠ch b√†i vi·∫øt v√† ƒë∆∞a ra ph·∫£n h·ªìi ph√π h·ª£p:

1. N·∫øu l√† b√†i t·∫≠p/c√¢u h·ªèi h·ªçc thu·∫≠t: H∆∞·ªõng d·∫´n gi·∫£i chi ti·∫øt, gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc
2. N·∫øu l√† th·∫£o lu·∫≠n h·ªçc t·∫≠p: ƒê∆∞a ra g√≥c nh√¨n s√¢u s·∫Øc, th√¥ng tin b·ªï sung h·ªØu √≠ch
3. N·∫øu l√† c√¢u h·ªèi th∆∞·ªùng: Tr·∫£ l·ªùi m·ªôt c√°ch th√¥ng minh v√† h·ªØu √≠ch
4. N·∫øu l√† chia s·∫ª c√° nh√¢n: ƒê·ªông vi√™n t√≠ch c·ª±c v√† ƒë∆∞a ra l·ªùi khuy√™n ph√π h·ª£p

Ph·∫£n h·ªìi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† chuy√™n nghi·ªáp. Ph·∫£n h·ªìi ph·∫£i c√≥ gi√° tr·ªã gi√°o d·ª•c cao.

Tr·∫£ v·ªÅ JSON v·ªõi format:
{
  "type": "exercise|discussion|question|general",
  "response": "ph·∫£n h·ªìi chi ti·∫øt c·ªßa b·∫°n",
  "confidence": s·ªë t·ª´ 0-1
}`;

      const response = await ai.models.generateContent({
        model: "gemini-2.5-pro",
        config: {
          systemInstruction: systemPrompt,
          responseMimeType: "application/json",
          responseSchema: {
            type: "object",
            properties: {
              type: { type: "string", enum: ["exercise", "discussion", "question", "general"] },
              response: { type: "string" },
              confidence: { type: "number" }
            },
            required: ["type", "response", "confidence"]
          }
        },
        contents: content
      });

      const rawJson = response.text;
      console.log(`Gemini response: ${rawJson}`);

      if (rawJson) {
        const analysis: PostAnalysis = JSON.parse(rawJson);
        return analysis;
      } else {
        throw new Error("Empty response from Gemini");
      }
    } catch (error) {
      console.error(`Failed to analyze post with Gemini: ${error}`);
      // Fallback response
      return {
        type: 'general',
        response: 'C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! ƒê√¢y l√† m·ªôt ch·ªß ƒë·ªÅ th√∫ v·ªã. H√£y ti·∫øp t·ª•c h·ªçc t·∫≠p v√† kh√°m ph√° nh√©! üìö',
        confidence: 0.5
      };
    }
  }

  /**
   * Generate educational content suggestions based on post
   */
  async generateStudySuggestions(content: string): Promise<string[]> {
    try {
      const systemPrompt = `D·ª±a v√†o n·ªôi dung b√†i vi·∫øt, h√£y ƒë·ªÅ xu·∫•t 3-5 ch·ªß ƒë·ªÅ h·ªçc t·∫≠p li√™n quan m√† h·ªçc sinh c√≥ th·ªÉ quan t√¢m.
Tr·∫£ v·ªÅ d·∫°ng m·∫£ng JSON c√°c string ng·∫Øn g·ªçn.`;

      const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        config: {
          systemInstruction: systemPrompt,
          responseMimeType: "application/json",
          responseSchema: {
            type: "array",
            items: { type: "string" }
          }
        },
        contents: content
      });

      const rawJson = response.text;
      if (rawJson) {
        return JSON.parse(rawJson);
      }
      return [];
    } catch (error) {
      console.error(`Failed to generate study suggestions: ${error}`);
      return [];
    }
  }
}

export const geminiService = new GeminiService();